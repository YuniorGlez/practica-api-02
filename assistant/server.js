import express from 'express';\nimport cors from 'cors';\nimport { Configuration, OpenAIApi } from 'openai';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.ASSISTANT_PORT || 4000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Check for API Key\nif (!process.env.OPENAI_API_KEY) {\n  console.error('FATAL ERROR: OPENAI_API_KEY environment variable is not set.');\n  process.exit(1); // Exit if API key is missing\n}\n\n// Configure OpenAI Client\n// Note: The openai package structure might have changed since v3.x shown in PRD.\n// This uses v4.x structure.\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// System prompt for the AI assistant\nconst SYSTEM_PROMPT = `Eres un tutor de JavaScript experto en desarrollo frontend y APIs REST, específicamente trabajando con Axios y JSON Server. Ayudas a un estudiante que está aprendiendo a conectar un frontend a una API de personajes de Dragon Ball. \n\nReglas estrictas:\n1. NO proporciones bloques de código de solución completos para las funciones en src/api.js (getCharacters, searchCharacters, createCharacter, updateCharacter, deleteCharacter, getCharacterById).\n2. En lugar de código completo, da pistas conceptuales, explica cómo funciona Axios (métodos GET, POST, PUT, DELETE), cómo construir las URLs, cómo pasar datos o parámetros, y cómo manejar las promesas con async/await.\n3. Puedes mostrar PEQUEÑOS fragmentos de código para ilustrar un concepto (ej: \\\`axios.get(URL)\\\` o \\\`{ params: { q: query } }\\\`), pero nunca la implementación completa de una función del ejercicio.\n4. Fomenta la comprensión de los conceptos de API REST, HTTP, y asincronía en JavaScript.\n5. Responde siempre en español.\n6. Mantén el contexto de la conversación. El historial se te pasa en cada llamada.`;\n\n// Chat endpoint\napp.post('/chat', async (req, res) => {\n  const { messages } = req.body; // Expecting an array like [{ role: 'user', content: '...' }, ...]\n\n  if (!messages || !Array.isArray(messages) || messages.length === 0) {\n    return res.status(400).json({ error: 'Invalid request body: messages array is required.' });\n  }\n\n  // Construct the full message history including the system prompt\n  const fullMessages = [{ role: 'system', content: SYSTEM_PROMPT }, ...messages];\n\n  try {\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-4o-mini', // Or your preferred model\n      messages: fullMessages,\n      temperature: 0.5, // Adjust for more/less creative responses\n    });\n\n    if (completion.choices && completion.choices.length > 0) {\n      res.json({ reply: completion.choices[0].message });\n    } else {\n      res.status(500).json({ error: 'No response from OpenAI' });\n    }\n  } catch (error) {\n    console.error('Error calling OpenAI API:', error);\n    let errorMessage = 'Error communicating with AI Assistant';\n    if (error.response) {\n        console.error('OpenAI Error Response:', error.response.data);\n        errorMessage = \`OpenAI Error: ${error.response.status} ${error.response.data?.error?.message || ''}\`.trim();\n    } else if (error.message) {\n        errorMessage = error.message;\n    }\n    res.status(500).json({ error: errorMessage });\n  }\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(\`🤖 AI Assistant server running at http://localhost:${PORT}\`);\n}); 